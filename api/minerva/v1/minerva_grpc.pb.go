// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: minerva/v1/minerva.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinervaClient is the client API for Minerva service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinervaClient interface {
	ParseSqlType(ctx context.Context, in *ParseSqlTypeRequest, opts ...grpc.CallOption) (*ParseSqlTypeReply, error)
}

type minervaClient struct {
	cc grpc.ClientConnInterface
}

func NewMinervaClient(cc grpc.ClientConnInterface) MinervaClient {
	return &minervaClient{cc}
}

func (c *minervaClient) ParseSqlType(ctx context.Context, in *ParseSqlTypeRequest, opts ...grpc.CallOption) (*ParseSqlTypeReply, error) {
	out := new(ParseSqlTypeReply)
	err := c.cc.Invoke(ctx, "/minerva.v1.Minerva/ParseSqlType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinervaServer is the server API for Minerva service.
// All implementations must embed UnimplementedMinervaServer
// for forward compatibility
type MinervaServer interface {
	ParseSqlType(context.Context, *ParseSqlTypeRequest) (*ParseSqlTypeReply, error)
	mustEmbedUnimplementedMinervaServer()
}

// UnimplementedMinervaServer must be embedded to have forward compatible implementations.
type UnimplementedMinervaServer struct {
}

func (UnimplementedMinervaServer) ParseSqlType(context.Context, *ParseSqlTypeRequest) (*ParseSqlTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseSqlType not implemented")
}
func (UnimplementedMinervaServer) mustEmbedUnimplementedMinervaServer() {}

// UnsafeMinervaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinervaServer will
// result in compilation errors.
type UnsafeMinervaServer interface {
	mustEmbedUnimplementedMinervaServer()
}

func RegisterMinervaServer(s grpc.ServiceRegistrar, srv MinervaServer) {
	s.RegisterService(&Minerva_ServiceDesc, srv)
}

func _Minerva_ParseSqlType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseSqlTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinervaServer).ParseSqlType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerva.v1.Minerva/ParseSqlType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinervaServer).ParseSqlType(ctx, req.(*ParseSqlTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Minerva_ServiceDesc is the grpc.ServiceDesc for Minerva service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Minerva_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minerva.v1.Minerva",
	HandlerType: (*MinervaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseSqlType",
			Handler:    _Minerva_ParseSqlType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minerva/v1/minerva.proto",
}
